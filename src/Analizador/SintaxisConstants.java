/* Generated By:JavaCC: Do not edit this line. SintaxisConstants.java */
package Analizador;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SintaxisConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int FN = 5;
  /** RegularExpression Id. */
  int LET = 6;
  /** RegularExpression Id. */
  int MUT = 7;
  /** RegularExpression Id. */
  int RETURN = 8;
  /** RegularExpression Id. */
  int IF = 9;
  /** RegularExpression Id. */
  int ELSE = 10;
  /** RegularExpression Id. */
  int ELSEIF = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int FOR = 13;
  /** RegularExpression Id. */
  int IN = 14;
  /** RegularExpression Id. */
  int TRUE = 15;
  /** RegularExpression Id. */
  int FALSE = 16;
  /** RegularExpression Id. */
  int I32 = 17;
  /** RegularExpression Id. */
  int F64 = 18;
  /** RegularExpression Id. */
  int BOOL = 19;
  /** RegularExpression Id. */
  int STR = 20;
  /** RegularExpression Id. */
  int STRING_KEYWORD = 21;
  /** RegularExpression Id. */
  int PRINTLN = 22;
  /** RegularExpression Id. */
  int PLUS = 23;
  /** RegularExpression Id. */
  int MINUS = 24;
  /** RegularExpression Id. */
  int MULTIPLICATION = 25;
  /** RegularExpression Id. */
  int DIVISION = 26;
  /** RegularExpression Id. */
  int MODULUS = 27;
  /** RegularExpression Id. */
  int EQUALTO = 28;
  /** RegularExpression Id. */
  int NOTEQUAL = 29;
  /** RegularExpression Id. */
  int LESSTHAN = 30;
  /** RegularExpression Id. */
  int GREATERTHAN = 31;
  /** RegularExpression Id. */
  int LESSTHANEQUAL = 32;
  /** RegularExpression Id. */
  int GREATERTHANEQUAL = 33;
  /** RegularExpression Id. */
  int AND = 34;
  /** RegularExpression Id. */
  int OR = 35;
  /** RegularExpression Id. */
  int NOT = 36;
  /** RegularExpression Id. */
  int EQUAL = 37;
  /** RegularExpression Id. */
  int LPARENT = 38;
  /** RegularExpression Id. */
  int RPARENT = 39;
  /** RegularExpression Id. */
  int LBRACKET = 40;
  /** RegularExpression Id. */
  int RBRACKET = 41;
  /** RegularExpression Id. */
  int LBRACE = 42;
  /** RegularExpression Id. */
  int RBRACE = 43;
  /** RegularExpression Id. */
  int COMMA = 44;
  /** RegularExpression Id. */
  int PUNTOYCOMA = 45;
  /** RegularExpression Id. */
  int COLON = 46;
  /** RegularExpression Id. */
  int ARROW = 47;
  /** RegularExpression Id. */
  int INT = 48;
  /** RegularExpression Id. */
  int FLOAT = 49;
  /** RegularExpression Id. */
  int STRING = 50;
  /** RegularExpression Id. */
  int IDENTIFIER = 51;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"fn\"",
    "\"let\"",
    "\"mut\"",
    "\"return\"",
    "\"if\"",
    "\"else\"",
    "\"else if\"",
    "\"while\"",
    "\"for\"",
    "\"in\"",
    "\"true\"",
    "\"false\"",
    "\"i32\"",
    "\"f64\"",
    "\"bool\"",
    "\"str\"",
    "\"String\"",
    "\"println!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"->\"",
    "<INT>",
    "<FLOAT>",
    "<STRING>",
    "<IDENTIFIER>",
    "\"\"",
  };

}
