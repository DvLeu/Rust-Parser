options {
  IGNORE_CASE = true;
  STATIC = false;
  BUILD_PARSER = true;
  LOOKAHEAD = 2;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(Sintaxis)
package Analizador;
public class Sintaxis {
    public static void main(String[] args) throws ParseException {
        Sintaxis parser = new Sintaxis(System.in);
        parser.Program();
    }
}
PARSER_END(Sintaxis)

/** Inicio del lexico **/

SKIP : {
    " "
  | "\t"
  | "\r"
  | "\n"
  | <"/*" (~["*"])* ("*" ~["/"] (~["*"])* )* "*/">
  | < "//" (~["\r", "\n"])* ("\r" | "\n") > // Comentarios de una línea
}

// Tokens de palabras reservadas
TOKEN : {
    < FN: "fn" >
  | < LET: "let" >
  | < MUT: "mut" >
  | < RETURN: "return" >
  | < IF: "if" >
  | < ELSE: "else" >
  | < ELSEIF: "else if" >
  | < WHILE: "while" >
  | < FOR: "for" >
  | < IN: "in" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < I32: "i32" >
  | < F64: "f64" >
  | < BOOL: "bool" >
  | < STR: "str" >
  | < STRING_KEYWORD: "String" >
  | < PRINTLN: "println!" >
  | < PRINT: "print!" >
}

// Tokens de operadores
TOKEN : {
    < PLUS: "+" >
  | < MINUS: "-" >
  | < MULTIPLICATION: "*" >
  | < DIVISION: "/" >
  | < MODULUS: "%" >
  | < EQUALTO: "==" >
  | < NOTEQUAL: "!=" >
  | < LESSTHAN: "<" >
  | < GREATERTHAN: ">" >
  | < LESSTHANEQUAL: "<=" >
  | < GREATERTHANEQUAL: ">=" >
  | < AND: "&&" >
  | < OR: "||" >
  | < NOT: "!" >
  | < EQUAL: "=" >
}

// Tokens de símbolos
TOKEN : {
    < LPARENT: "(" >
  | < RPARENT: ")" >
  | < LBRACKET: "[" >
  | < RBRACKET: "]" >
  | < LBRACE: "{" >
  | < RBRACE: "}" >
  | < COMMA: "," >
  | < PUNTOYCOMA: ";" >
  | < COLON: ":" >
  | < ARROW: "->" >
}

// Tokens de números y cadenas
TOKEN : {
    < INT: (["0"-"9"])+ >
  | < FLOAT: (["0"-"9"])+ "." (["0"-"9"])+ >
  | < STRING: "\"" (~["\""])* "\"" >
  | < IDENTIFIER: (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "0"-"9", "_"])* >
}

/** Fin Lexico **/

// Define el programa como una serie de declaraciones
void Program() : {}
{
    (Declaracion())*
}

// Define una declaración como una declaración de variable, una declaración de función, una estructura de control, una expresión o un bloque
void Declaracion() : {}
{
    DeclaracionVariable()
  | DeclaracionFuncion()
  | EstructuraControl()
  | Expresion()
  | Bloque()
  | DeclaracionImpresion()
  | DeclaracionLlamadaFuncion()
}

// Define una declaración de variable
void DeclaracionVariable() : {}
{
    <LET> [<MUT>] <IDENTIFIER> [":" Tipo()] "=" Expresion() <PUNTOYCOMA>
}

// Define una declaración de función
void DeclaracionFuncion() : {}
{
    <FN> <IDENTIFIER> <LPARENT> [ListaParametros()] <RPARENT> [ <ARROW> Tipo() ] Bloque()
}

// Define una lista de parámetros de función
void ListaParametros() : {}
{
    Parametro() ( <COMMA> Parametro() )* | ""
}

// Define un parámetro de función
void Parametro() : {}
{
    <IDENTIFIER> <COLON> Tipo()
}

// Define una estructura de control
void EstructuraControl() : {}
{
    DeclaracionIf()
  | DeclaracionWhile()
  | DeclaracionFor()
}

// Define una declaración if con soporte para else if y else
void DeclaracionIf() : {}
{
    <IF> Expresion() Bloque() ( <ELSEIF> Expresion() Bloque() )* [ <ELSE> Bloque() ]
}

// Define una declaración while
void DeclaracionWhile() : {}
{
    <WHILE> Expresion() Bloque()
}

// Define una declaración for
void DeclaracionFor() : {}
{
    <FOR> <IDENTIFIER> <IN> Expresion() ".." [ <EQUAL> ] Expresion() Bloque()
}

// Define un bloque de código
void Bloque() : {}
{
    <LBRACE> (Declaracion())* <RBRACE>
}

// Define una expresión
void Expresion() : {}
{
    ExpresionAsignacion() | ExpresionLogicaOr()
}

// Define una asignación
void ExpresionAsignacion() : {}
{
    <IDENTIFIER> <EQUAL> Expresion()
}

// Define una expresión lógica OR
void ExpresionLogicaOr() : {}
{
    ExpresionLogicaAnd() ( <OR> ExpresionLogicaAnd() )*
}

// Define una expresión lógica AND
void ExpresionLogicaAnd() : {}
{
    ExpresionIgualdad() ( <AND> ExpresionIgualdad() )*
}

// Define una expresión de igualdad
void ExpresionIgualdad() : {}
{
    ExpresionRelacional() ( ( <EQUALTO> | <NOTEQUAL> ) ExpresionRelacional() )*
}

// Define una expresión relacional
void ExpresionRelacional() : {}
{
    ExpresionAditiva() ( ( <LESSTHAN> | <GREATERTHAN> | <LESSTHANEQUAL> | <GREATERTHANEQUAL> ) ExpresionAditiva() )*
}

// Define una expresión aditiva
void ExpresionAditiva() : {}
{
    ExpresionMultiplicativa() ( ( <PLUS> | <MINUS> ) ExpresionMultiplicativa() )*
}

// Define una expresión multiplicativa
void ExpresionMultiplicativa() : {}
{
    ExpresionUnaria() ( ( <MULTIPLICATION> | <DIVISION> | <MODULUS> ) ExpresionUnaria() )*
}

// Define una expresión unaria
void ExpresionUnaria() : {}
{
    <NOT> ExpresionUnaria() | ExpresionPrimaria()
}

// Define una expresión primaria
void ExpresionPrimaria() : {}
{
    Literal()
  | <IDENTIFIER>
  | LlamadaFuncion()
  | <LPARENT> Expresion() <RPARENT>
}

// Define un literal
void Literal() : {}
{
    <INT>
  | <FLOAT>
  | <STRING>
  | <TRUE>
  | <FALSE>
}

// Define una llamada a función
void LlamadaFuncion() : {}
{
    <IDENTIFIER> <LPARENT> [ListaArgumentos()] <RPARENT>
}

// Define una declaración de llamada a función
void DeclaracionLlamadaFuncion() : {}
{
    LlamadaFuncion() <PUNTOYCOMA>
}

// Define una lista de argumentos
void ListaArgumentos() : {}
{
    Expresion() ( <COMMA> Expresion() )* | ""
}

// Define un tipo de dato
void Tipo() : {}
{
    < I32 >
  | < F64 >
  | < BOOL >
  | < STR >
  | < STRING_KEYWORD >
  | < IDENTIFIER > // Para tipos definidos por el usuario
}

// Define una declaración de impresión
void DeclaracionImpresion() : {}
{
    (<PRINTLN> | <PRINT> ) <LPARENT> [ListaArgumentos()] <RPARENT> <PUNTOYCOMA>
}
